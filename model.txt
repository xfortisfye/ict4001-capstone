# create base model
# def create_base_model():
#     model = Sequential()
#     model.add(LSTM(units=1024, return_sequences=True,
#              input_shape=(TIMESTEPS,N_FEATURES)))
#     model.add(Dropout(0.2))
#     model.add(BatchNormalization())
#     model.add(LSTM(units=512, return_sequences=True))
#     model.add(Dropout(0.2))
#     model.add(LSTM(units=256, return_sequences=True))
#     model.add(Dropout(0.2))
# #     model.add(LSTM(units=128, return_sequences=True))
# #     model.add(Dropout(0.2))
# #     model.add(LSTM(units=128, return_sequences=True))
# #     model.add(Dropout(0.2))
# #     model.add(LSTM(units=128, return_sequences=True))
# #     model.add(BatchNormalization())
# #     model.add(LSTM(units=64, return_sequences=True))
# #     model.add(Dropout(0.2))
# #     model.add(LSTM(units=32, return_sequences=True))
# #     model.add(Dropout(0.2))
#     model.add(BatchNormalization())
#     # softmax for multi-class classification
#     model.add(Flatten())
#     print(n_classes)
#     model.add(Dense(n_classes, activation='softmax'))

#     model.compile(loss='categorical_crossentropy', optimizer='adam',
#                 metrics=['accuracy'])
#     return model

#create base model
def create_base_model():
    model = Sequential()
    model.add(LSTM(units=128, return_sequences=True,
             input_shape=(TIMESTEPS,N_FEATURES)))
    model.add(Dense(128, activation='sigmoid'))
    model.add(Dropout(0.2))
    model.add(BatchNormalization())
    
    model.add(LSTM(units=64, return_sequences=True))
    model.add(Dense(64, activation='sigmoid'))
    model.add(Dropout(0.2))
    model.add(BatchNormalization())
    
    model.add(LSTM(units=32, return_sequences=True))
    model.add(Dense(32, activation='sigmoid'))
    model.add(Dropout(0.2))
    
    # softmax for multi-class classification
    model.add(Flatten())
    print(n_classes)
    model.add(Dense(n_classes, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam',
                metrics=['accuracy'])
    return model

# wrap model in KerasClassifier
def create_model():
    model = KerasClassifier(build_fn=create_base_model, epochs=EPOCH, 
                            batch_size=BATCH_SIZE)
    return model

